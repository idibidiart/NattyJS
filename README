 README:
  
  This version works in Gecko and Webkit, not tested on IE
 
  NattyJS - NiNu's Anti-Templating
 
  "All the separation and none of the baggage" 
 
  What is it? 
 
  Data-Driven DOM-Based "Templating" Without The Templates    
 
  How Does It Work?
  
  Natty works by caching the virgin innerHTML (the Node Prototype) of all DOM elements (the Nodes) that have a 
  'natty-node-id' attribute at window.onload or $(document).ready. Each Node must contain exactly one direct child
  at time of caching, i.e. the Node Prototype, which must contain special variables (in its inner/outer HTML) to 
  be replaced, in global, dynamic fashion, with JSON data within the inner/outer HTML scope of a newly created 
  instance of the Node Prototype. 
 
  The Node Prototype may hold an arbitrarily complex DOM structure, and one in which Node(s) defined elsewhere 
  in the DOM may be dynamically linked by reference (called Linked Nodes)
 
  Natty works by populating the special variables in a newly created instance of the Node Prototype with dynamic 
  JSON data (where the JSON keys must correspond to the special variables in the Node Prototype) and then inserting the 
  newly populated instance into the Node itself, using replace (default on first insertion), append or prepend methods, 
  as applied to the Node's entire content (the virgin innerHTML or all populated instances of the Node Prototype that
  were previously inserted into the Node) 
 
  Natty allows the DOM to be decomposed into Nodes each having a Node Prototype from which instances can be created, 
  populated with JSON data and then inserted into the Node (in append, prepend, and replace modes, with the ability to 
  target specific instances of the Node Prototype or the Node's entire content) where the Node itself can be dynamically 
  linked into other Nodes and so on...
  
  Examples: 
 
  For now, take a look at test.html
 
  See Notes under String.prototype._nattyMapValues for the expected JSON format
  
  Main Invocation Pattern
 
  .n$ 
 
  document.querySelector('#someNode').n$(data [, options])
 
  behavior: creates new instance of Prototype Node using data to populate the special variables in Prototype Node,
  then append/prepend to (or replace) existing instance(s) in the Node
 
  >> data: {key: value, key: value, key: value, etc} 
  where the keys must match the natty node variables in the Node Prototype minus the n$ prefix
 
  >> options: {mode: 'replace'|'append'|'prepend', targetSelector: value, ownSelector: value,
  nodeSelector: value, targetState: value, ownState: value, nodeState: value}
 
  if there no populated instances of Prototype Node exist (or if the Node's innerHTML was deleted after or before 
  populated instances of Prototype Node were inserted) then append/prepend/replace will all replace the Node's 
  entire innerHTML (if targetSelector is supplied in this case it will throw an error, so be call .$isPopulated() to 
  be sure, before invoking this method with targetSelector)
 
  targetSelector: optional natty-selector value for instance of Prototpe Node to insert into Node in append and prepend modes. 
  If null, append/prepend at last/1st child node
 
  targetSelector: optional natty-selector value for instance of Prototpe Node to insert into Node in replace mode. 
  If null, replace entire innerHTML of node
 
  ownSelector: new value of natty-selector value for instance of Prototpe Node being inserted
 
  ownState: new value of natty-state attribute for instance of Prototpe Node being inserted
 
  targetState: optional natty-selector value for instance of Prototpe Node to insert at in append and prepend modes 
  targetState: optional natty-selector value for instance of Prototpe Node to insert at in replace mode
 
  nodeSelector: new value of natty-selector for the Node itself
 
  nodeState: new value of natty-state for the Node itself

